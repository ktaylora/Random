#!/usr/bin/Rscript

#
# A handy script with BASH comprehension, useful for reprojecting and mosaicing
# raster segments downloaded from a Google Earth Engine zipfile (as from Google
# Drive)
#
# Author: Kyle Taylor (kyle.taylor@pljv.org) (c) [2017]
#

argv <- commandArgs(trailingOnly=T)

if(length(argv)<1) stop("requires one argument: ",
  "[full path to gee zipfile with raster to reproject] or a directory of ",
  "tifs specified with the -d argument")

require(snow)
require(raster)

beginCluster(n=2)
rasterOptions(tmpdir="/home/ktaylora/r_raster_tmp")
template <- "/global_workspace/ring_necked_pheasant_imbcr_models/raster/2016_crp_107x107.tif"

#
# local function declarations
#

reproject_raster <- function(r=NULL,template=NULL){
  if(!file.exists(template)){
    stop("template= file doesn't exist")
  }
  if(!inherits(r,"Raster")){
    r <- raster::raster(r)
  }
  # fixed raster template object we are projecting "to"
  if(!inherits(template,"Raster")){
    template <- raster::raster(template)
  }
  # reproject, if needed
  if(raster::projection(r) != raster::projection(template)){
    cat(" -- reprojecting:",names(r),"\n")
    reprojected <- raster::projectRaster(r, crs=CRS(projection(template)),progress='text')
      final <- raster::projectRaster(reprojected,to=template, progress='text')
  } else {
    final <- r
  }
  return(final)
}

#
# MAIN
#

using_directory <- which(grepl(tolower(argv),pattern="-d $"))
using_template  <- which(grepl(tolower(argv),pattern="-t $"))
using_destfile  <- which(grepl(tolower(argv),pattern="-o $"))
      dest_file <- "merged.tif"

if(sum(using_directory)>0){
  rasters <- list.files(argv[using_directory+1], pattern="tif$", full.names=T)
  if(length(rasters)<1){
    stop("-d directory argument didn't contain any .tif images")
  }
# if there wasn't a directory specification we will treat this as one image
} else {
  if(!file.exists(argv)){
    stop("file",argv,"doesn't exist")
  } else {
    if(grepl(argv,pattern="zip$")){
      # create a local dir for unpacking and read contents as raster
      if(dir.exists("unpack")){
        # unlink("unpack", recursive=T, force=T)
      } else {
        dir.create("unpack")
      }
      # read zipfile contents and figure out a good dest_file name
      dest_file <- unlist(strsplit(unzip(argv,list=T)[1,1],split="-0"))[1]
        dest_file <- paste(dest_file,".tif",sep="")
      # unpack and kludge for tif segments
      utils::unzip(argv, exdir="unpack", overwrite=T)
      rasters <- list.files("unpack", pattern=gsub(dest_file,
                   pattern=".tif",replacement=".*[0-9].tif"), full.names=T)
    } else {
        # assume it's a raster : AFNP
        rasters <- argv
    }
  }
}
if(sum(using_template)>0){
  template <- argv[using_template+1]
} else {
  template <- "/home/ktaylora/Workspace/nass/2016_crp_107x107.tif"
}
# stepwise reproject each raster segment to the CRS and resolution of
# our target template raster data
for(r in rasters){
  target <- gsub(r, pattern="tif$", replacement="reprojected.tif")
  if(file.exists(target)){
    cat(" -- target file",target,"already exists... skipping...\n")
  } else {
    r <- reproject_raster(r,template=template)
    cat(" -- writing to disk:\n")
    writeRaster(r, target, overwrite=T, progress='text')
    rm(r);
    raster::removeTmpFiles(h=1);
    gc()
  }
}
raster::endCluster()
# merge reprojected segments
cat(" -- merging\n")
rasters <- as.list(list.files("unpack", pattern="reprojected.tif$", full.names=T))
  rasters <- lapply(rasters, raster)
    rasters <- do.call(raster::merge, rasters)
# write to disk
cat(" -- writing to disk\n")
writeRaster(rasters,dest_file,overwrite=T)
# clean up, but only "our" files -- allow that other threads might be using
# the unpack directory
unlink(list.files("unpack", pattern=gsub(dest_file,
  pattern=".tif",replacement=".*.tif"), full.names=T),
    recursive=T, force=T)

raster::removeTmpFiles(h=1);
